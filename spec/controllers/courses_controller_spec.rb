require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CoursesController, type: :controller do
  let!(:user) { FactoryGirl.create :user }
  before { sign_in user }

  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { title: 'Paranormal Investigative Techniques' }
  }

  let(:invalid_attributes) {
    { title: nil }
  }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "doesnt assign other users courses to @courses" do
      course = Course.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:courses)).to eq([])
    end
    # user.course_participants.build(role: Role.student, course: Course.new(title: 'baskets'))
    it 'assigns the courses for this user to @courses' do
      user = FactoryGirl.create(:user, :with_courses, count: 3)
      sign_in user
      get :index, {}, valid_session
      expect(assigns(:courses).count).to eq 3
    end
  end

  describe "GET #show" do
    it "assigns the requested course as @course" do
      course = Course.create! valid_attributes
      FactoryGirl.create(:course_participant, user: user, course: course)
      get :show, {:id => course.to_param}, valid_session
      expect(assigns(:course)).to eq(course)
    end

    it "doesn't assign the course if it's not this user's" do
      course = FactoryGirl.create(:course)
      expect { get :show, { id: course.to_param }, valid_session }
        .to raise_error ActiveRecord::RecordNotFound
    end
  end

  describe "GET #new" do
    it "assigns a new course as @course" do
      get :new, {}, valid_session
      expect(assigns(:course)).to be_a_new(Course)
    end
  end

  describe "GET #edit" do
    it "assigns the requested course as @course" do
      course = Course.create! valid_attributes
      FactoryGirl.create(:course_participant, user: user, course: course)
      get :edit, {:id => course.to_param}, valid_session
      expect(assigns(:course)).to eq(course)
    end
    it "404s if it's not your course" do
      course = Course.create! valid_attributes
      expect do
        get :edit, {id: course.to_param}, valid_session
      end.to raise_error ActiveRecord::RecordNotFound
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Course" do
        expect {
          post :create, {:course => valid_attributes}, valid_session
        }.to change(Course, :count).by(1)
      end

      it "assigns a newly created course as @course" do
        post :create, {:course => valid_attributes}, valid_session
        expect(assigns(:course)).to be_a(Course)
        expect(assigns(:course)).to be_persisted
      end

      it "redirects to the created course" do
        post :create, {:course => valid_attributes}, valid_session
        expect(response).to redirect_to(Course.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved course as @course" do
        post :create, {:course => invalid_attributes}, valid_session
        expect(assigns(:course)).to be_a_new(Course)
      end

      it "re-renders the 'new' template" do
        post :create, {:course => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do

    let!(:course) { FactoryGirl.create(:course_for_user, user: user) }

    context "with valid params" do
      let(:new_attributes) {
        { title: "Advanced Rocket Science" }
      }

      it "updates the requested course" do
        put :update, {:id => course.to_param, :course => new_attributes}, valid_session
        course.reload
        expect(course.title).to match 'Advanced'
      end

      it "assigns the requested course as @course" do
        put :update, {:id => course.to_param, :course => valid_attributes}, valid_session
        expect(assigns(:course)).to eq(course)
      end

      it "redirects to the course" do
        put :update, {:id => course.to_param, :course => valid_attributes}, valid_session
        expect(response).to redirect_to(course)
      end
    end

    context "with invalid params" do
      it "assigns the course as @course" do
        put :update, {:id => course.to_param, :course => invalid_attributes}, valid_session
        expect(assigns(:course)).to eq(course)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => course.to_param, :course => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end

    context "for courses not owned by the user" do
      it "404s" do
        new_course = FactoryGirl.create(:course)
        expect do
          put :update, {id: new_course.to_param }, valid_session
        end.to raise_error ActiveRecord::RecordNotFound
      end
    end
  end

  describe "DELETE #destroy" do
    context "for courses owned by the user" do
      let!(:course) { FactoryGirl.create(:course_for_user, user: user) }
      it "destroys the requested course" do
        expect {
          delete :destroy, {:id => course.to_param}, valid_session
        }.to change(Course, :count).by(-1)
      end

      it "redirects to the courses list" do
        delete :destroy, {:id => course.to_param}, valid_session
        expect(response).to redirect_to(courses_url)
      end
    end
    context "for courses not owned by the user" do
      let!(:course) { FactoryGirl.create(:course) }

      it "404s" do
        expect { delete :destroy, {id: course.to_param}, valid_session }
          .to raise_error ActiveRecord::RecordNotFound
      end
    end
  end
end
